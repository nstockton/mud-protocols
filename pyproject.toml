[build-system]
	requires = [
		"poetry-core>=1.0.0",
		"poetry-dynamic-versioning==1.4.0",
	]
	build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry]
	name = "mud-protocols"
	version = "0.0.0"
	description = "MUD protocols implemented in Python."
	authors = ["Nick Stockton <nstockton@users.noreply.github.com>"]
	license = "MPL-2.0"
	readme = "README.md"
	homepage = "https://github.com/nstockton/mud-protocols"
	repository = "https://github.com/nstockton/mud-protocols"
	documentation = "https://nstockton.github.io/mud-protocols"
	keywords = ["mud", "protocol", "telnet"]
	classifiers = [
		"License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
		"Programming Language :: Python",
		"Programming Language :: Python :: 3",
		"Programming Language :: Python :: 3 :: Only",
		"Programming Language :: Python :: 3.9",
		"Programming Language :: Python :: 3.10",
		"Programming Language :: Python :: 3.11",
		"Programming Language :: Python :: 3.12",
		"Programming Language :: Python :: Implementation",
		"Programming Language :: Python :: Implementation :: CPython",
		"Development Status :: 5 - Production/Stable",
		"Intended Audience :: Developers",
		"Operating System :: MacOS",
		"Operating System :: MacOS :: MacOS X",
		"Operating System :: Microsoft",
		"Operating System :: Microsoft :: Windows",
		"Operating System :: OS Independent",
		"Operating System :: POSIX",
		"Operating System :: POSIX :: BSD",
		"Operating System :: POSIX :: Linux",
		"Operating System :: Unix",
		"Topic :: Software Development :: Libraries",
	]
	packages = [
		{include = "mudproto", from = "src"},
	]
	include = [
		{path = "tests/*", format = "sdist"},
		{path = "poetry.lock", format = "sdist"},
	]
	exclude = []

[tool.poetry.dependencies]
	python = "^3.9"
	knickknacks = {url = "https://github.com/nstockton/knickknacks/releases/download/v0.1.1/knickknacks-0.1.1-py3-none-any.whl"}
	typing-extensions = {version = "^4.1", python = "< 3.11"}

[tool.poetry.dev-dependencies]
	poetry-dynamic-versioning = {version = "1.4.0", extras = ["plugin"]}
	pre-commit = "^3.5"

[tool.poetry.group.docs.dependencies]
	jinja2 = "3.0.3"  # See https://github.com/mkdocs/mkdocs/issues/2799
	mkdocs = "1.2.3"
	mkdocs-autorefs = "0.3.1"
	mkdocs-material = "8.1.3"
	mkdocs-material-extensions = "1.0.3"
	mkdocstrings = "0.17.0"
	pytkdocs = {git = "https://github.com/nstockton/pytkdocs.git", rev = "9991d493b408c403ac5691074e2af2e509f22926"}

[tool.poetry.group.lint.dependencies]
	isort = "^5.13"
	mypy = "^1.8"
	ruff = "^0.6"

[tool.poetry.group.test.dependencies]
	coverage = {version = "^7.4", extras = ["toml"]}

[tool.poetry-dynamic-versioning]
	enable = true
	vcs = "git"
	format-jinja = "{% if distance == 0 %}{{ base }}{% else %}{{ base }}+{{ distance }}.g{{ commit|truncate(7,true,'') }}{% endif %}"

[tool.poetry-dynamic-versioning.substitution]
	files = [
		"src/*.py", "src/*/__init__.py", "src/*/__version__.py", "src/*/_version.py",
	]
	patterns = [
		"(^__version__(?:\\s*[:]\\s*str)?\\s*=\\s*['\"])[^'\"]*(['\"])",
	]

[tool.ruff]
	extend-include = [
		"*.pyw",
		"./pyinstaller_windows.spec",
	]
	force-exclude = true
	line-length = 110

[tool.ruff.format]
	docstring-code-format = false
	indent-style = "tab"
	line-ending = "cr-lf"

[tool.ruff.lint]
	extend-select = [
		"B",  # Flake8-bugbear.
		"C901",  # McCabe complexity.
		"D",  # Pydocstyle.
		"D213",  # Multi-line docstring summary should start at the second line.
		"E501",  # Line too long.
		"N801",  # Class name should use CapWords convention.
		"N804",  # First argument of a class method should be named cls.
		"N805",  # First argument of a method should be named self.
		"N818",  # Exception name should be named with an Error suffix.
		"PERF",  # Perflint.
		"RET",  # Flake8-return.
		"RSE",  # Flake8-raise.
		"SIM",  # Flake8-simplify.
		"W",  # Pycodestyle warnings.
	]
	ignore = [
		"D105",  # Missing docstring in magic method.
		"D206",  # Docstring should be indented with spaces, not tabs.
		"D212",  # Multi-line docstring summary should start at the first line.
		"I",  # ISort will handle imports instead of Ruff.
		"W191",  # Indentation contains tabs.
	]
	unfixable = [
		"B",  # Flake8-bugbear.
	]

[tool.ruff.lint.mccabe]
	max-complexity = 15

[tool.ruff.lint.per-file-ignores]
	"**/__init__.py" = ["D1"]
	"./tests/**" = ["D1"]

[tool.ruff.lint.pydocstyle]
	convention = "google"

[tool.coverage.report]
	precision = 0
	fail_under = 100.0
	show_missing = true
	skip_covered = true
	sort = "Cover"
	exclude_lines = [
		'\#\s*pragma: no cover',
		'^\s*raise AssertionError\b',
		'^\s*raise NotImplementedError\b',
		'^\s*def __repr__',
		'^\s*def __str__',
		'^\s*if __name__ == .__main__.:',
	]

[tool.coverage.run]
	source = ["mudproto"]
	omit = []

[tool.isort]
	line_length = 110  # The max length of an import line (used for wrapping long imports).
	color_output = false
	# Specify what extensions isort can be ran against.
	supported_extensions = ["py", "pyi", "pys", "pyw"]
	extend_skip = []  # List of files to skip.
	indent = "tab"  # String to place for indents.
	atomic = true  # Ensures the output doesn't save if the resulting file contains syntax errors.
	dedup_headings = true  # Only show an identical custom import heading comment once.
	multi_line_output = 3  # Vertical hanging indent for long sections of multiple imports.
	include_trailing_comma = true  # Include a trailing comma on multi line imports that include parentheses.
	force_grid_wrap = 0  # Only consider line length when forcing lines to be grid wrapped.
	use_parentheses = true  # Use parentheses for line continuation on length limit instead of slashes.
	ensure_newline_before_comments = true  # Insert a blank line before a comment following an import.
	indented_import_headings = false  # Do not include import headings inside indented imports.
	float_to_top = true  # Float all non-indented imports to the top of the file.
	lines_after_imports = 2  # Add this many lines after imports / before code begins.
	force_adds = false  # Do not force import adds if the original file is empty.
	from_first = false  # Show from imports after straight ones.
	combine_as_imports = false  # Combine as imports on the same line.
	order_by_type = true  # Order imports by type, which is determined by case, in addition to alphabetically.
	reverse_relative = true  # Reverse order of relative imports.
	add_imports = ["from __future__ import annotations"]  # Add the specified import lines to all files.
	default_section = "STDLIB"  # Set the default section for imports.
	# The heading to display for future imports.
	import_heading_future = "Future Modules:"
	# The heading to display for standard library imports.
	import_heading_stdlib = "Built-in Modules:"
	# The heading to display for third-party imports.
	import_heading_thirdparty = "Third-party Modules:"
	# Override known third-party imports.
	known_third_party = [
		"knickknacks",
		"typing_extensions",
	]
	# The heading to display for first-party imports.
	import_heading_firstparty = "MUD Protocol Modules:"
	# Override known first-party imports.
	known_first_party = ["mudproto"]
	# The heading to display for local imports.
	import_heading_localfolder = "Local Modules:"

[tool.mypy]
	files = ["src/mudproto", "tests"]
	exclude = '^$'
	local_partial_types = true
	strict = true
	disallow_any_unimported = true
	disallow_any_decorated = true
	warn_unreachable = true
	show_error_codes = true
	no_color_output = true

[[tool.mypy.overrides]]
	module = "tests.*"
	disallow_any_decorated = false
