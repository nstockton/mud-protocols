name: Main

on:
  push:
    branches:
      - '**' # All branch names including slashes.
      - '!gh-pages' # Except for gh-pages.
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches:
      - '**' # All branch names including slashes.
      - '!gh-pages' # Except for gh-pages.
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab.

jobs:
  build:
    name: Build And Test
    strategy:
      max-parallel: 4
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # All history for all branches and tags.
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          # Optional - x64 or x86 architecture, defaults to x64.
          architecture: x64
      - name: Setup Virtual Environment
        id: cache-virtualenv
        uses: syphar/restore-virtualenv@v1
      - name: Restore Pip Cache
        uses: syphar/restore-pip-download-cache@v1
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
      - name: Install dependencies
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade "poetry==1.1.13"
          poetry install --no-interaction --no-root
      - name: Install library
        run: |
          poetry install --no-interaction
      - name: Lint And Test
        run: |
          python -m pre_commit install -t pre-commit
          python -m pre_commit install -t pre-push
          python -m pre_commit run --all-files --show-diff-on-failure --hook-stage commit
          python -m pre_commit run --all-files --show-diff-on-failure --hook-stage push
          poetry build --no-interaction
      - name: Test Documentation
        if: matrix.python-version == '3.10'
        run: |
          # Reexamine this when Python 10.3 is released.
          #python -m pre_commit run --all-files --show-diff-on-failure --hook-stage manual
  deploy:
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    name: Deploy Release
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # All history for all branches and tags.
      - name: Get Project Info
        id: project_info
        run: |
          NAME=${GITHUB_REPOSITORY#*/} # Everything after the first /.
          NAME=${NAME^} # Capitalize first character.
          VERSION=${GITHUB_REF#refs/tags/v} # Everything after the v.
          echo ::set-output name=name::${NAME}
          echo ::set-output name=version::${VERSION}
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          # Optional - x64 or x86 architecture, defaults to x64.
          architecture: x64
      - name: Setup Virtual Environment
        id: cache-virtualenv
        uses: syphar/restore-virtualenv@v1
      - name: Restore Pip Cache
        uses: syphar/restore-pip-download-cache@v1
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
      - name: Install dependencies
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade "poetry==1.1.13"
          poetry install --no-interaction --no-root
      - name: Install library
        run: |
          poetry install --no-interaction
      - name: Build Wheel And Source Archive
        id: build_dist
        run: |
          poetry build --no-interaction
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Automatically provided by Actions.
          name: ${{ steps.project_info.outputs.name }} Version ${{ steps.project_info.outputs.version }}
          body: Auto-generated release.
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: |
            dist/*
      - name: Publish Documentation
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          # Reexamine this when Python 10.3 is released.
          #mkdocs gh-deploy --force
